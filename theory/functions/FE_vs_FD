/*
In many situations I'm forced to use FE: creating a callback, immediately invoked FE.

FE is simply a func that is defined as a part of a larger expression (assgining a func to a variable in most of times).

FE happens to be an anonymous func, meaning there is no name assosiated with that func.

1st difference:
FD is always hoisted, meaning as the code is parsed the declaired funcs are elevated to the top of the page, so you can call that funcs BEFORE they're defined
*/
console.log(doSomething);
doSomething();

function doSomething() {
  console.log('decalre something');
}

console.log(expression);  
//undefined, the var variable is hoisted as well! 

// expression(); //TypeError: the expression is not a function

/*
The reason it says that, is that the varibale has been declared but the JS engine during the execution hasn't gotten to the line where it actually assigns the function to the variable. Therefore it doesn't know that the variable is the func and isn' table to execute it
*/

var expression = function() {
  console.log('express something');
}

/*
2nd difference:
FE shows the true nature of funcs in JS - the fact that the funcs are 'first-class', meaning funcs can be passed around, assigned to variables, etc.
*/

/*
reason to use named FE opposed to FE - the Call Stack in the debugger will show the func.name!
if I don't include the name in FE, debugger's Call Stack will simply show anonymous instead of func.name
*/