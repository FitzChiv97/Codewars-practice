//Why are JS funcs 'first-class'?

/*
The term 'first-class' means that something is just a value. 
A first-class func is one that can go anywhere that any other value can go -
there are few to no restrictions.

KEY IDEA is that frist-calss functions are treated as values.
*/

// 1. func can be stored in a variable
let func = function() {};

// 2. func can be stored in an array
let arr = [28, function() {}];
console.log(typeof arr[1])

// 3. func can be stored in an object property (i.e. method)
let obj = {
  num: 28,
  func() {console.log('hi')},
}
obj.func();

// 4. func can be created as needed as a part of the expression (type of func - immediately invoked FE)
console.log(28 + (function() {return 10;})());

// 5. func can be passed to another function (and invoked there)
let addTwo = function(num, fn) {
  console.log(num + fn());
}
addTwo(28, function() {return 20;});

// 6. func can be returned from a function
let returnFun = function() {
  return function() {
    console.log('hi');
  }
}
let newFun = returnFun();
newFun();